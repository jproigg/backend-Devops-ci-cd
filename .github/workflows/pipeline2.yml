name: Python CI/CD

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]
env:
  REPO: jproigg/backend-devops-ci-cd

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Sonarcloud scan
      uses: sonarsource/sonarcloud-github-action@master
      with:
        args: >
          - Dsonar.organization=jproigg
          - Dsonar.projectKey=jproigg_backend-Devops-ci-cd
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
    - name: crear ejecutable
      run: |
          pyinstaller app.py
    - name: Login to Dockerhub Registry
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Docker image
      env:
        CONTAINER_IMAGE: ${{env.REPO}}:${{github.sha}}
        CONTAINER_IMAGE_LATEST: "${{ env.REPO }}:latest"
      run: |
        docker build -t  $CONTAINER_IMAGE -t $CONTAINER_IMAGE_LATEST .
    - name: Scan Docker image
      uses: anchore/scan-action@v2
      id: scan
      with:
        image: ${{env.REPO}}:${{github.sha}}
        acs-report-enable: true
        fail-build: false
    - name: Push Docker image
      env:
        CONTAINER_IMAGE: ${{env.REPO}}:${{github.sha}}
        CONTAINER_IMAGE_LATEST: "${{ env.REPO }}:latest"
      run: |
        docker push $CONTAINER_IMAGE 
        docker push $CONTAINER_IMAGE_LATEST 
        
